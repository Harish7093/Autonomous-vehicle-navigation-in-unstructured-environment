#install libraries
pip install pygame sys random heapq


import pygame
import sys
import random
import heapq

# Define colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

# Initialize Pygame
pygame.init()

# Set up the screen
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Autonomous Vehicle Navigation in unstructered environment")

# Define obstacle class
class Obstacle(pygame.sprite.Sprite):
    def __init__(self, x, y, width, height):
        super().__init__()
        self.image = pygame.Surface((width, height))
        self.image.fill(RED)
        self.rect = self.image.get_rect(center=(x, y))

# Define vehicle class
class Vehicle(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((20, 20))
        self.image.fill(GREEN)
        self.rect = self.image.get_rect(center=(x, y))
        self.path = []
        self.speed = 3

    def update(self, obstacles, destination):
        if not self.path:
            self.path = self.calculate_path(destination, obstacles)
        
        if self.path:
            dest_x, dest_y = self.path[0]
            dx = dest_x - self.rect.centerx
            dy = dest_y - self.rect.centery
            dist = ((dx ** 2) + (dy ** 2)) ** 0.5

            if dist > self.speed:
                self.rect.x += self.speed * dx / dist
                self.rect.y += self.speed * dy / dist
            else:
                self.rect.center = (dest_x, dest_y)
                self.path.pop(0)

    def calculate_path(self, destination, obstacles):
        start = (self.rect.centerx, self.rect.centery)
        end = destination
        open_list = []
        closed_set = set()

        heapq.heappush(open_list, (0, start, []))

        while open_list:
            _, current, path = heapq.heappop(open_list)

            if current == end:
                return path

            if current in closed_set:
                continue

            closed_set.add(current)

            for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                neighbor = (current[0] + dx, current[1] + dy)
                if neighbor not in closed_set and not self.check_collision(neighbor, obstacles) and self.is_within_bounds(neighbor):
                    new_path = path + [neighbor]
                    heapq.heappush(open_list, (self.heuristic(neighbor, end), neighbor, new_path))

        return []

    def heuristic(self, a, b):
        return abs(a[0] - b[0]) + abs(a[1] - b[1])

    def check_collision(self, position, obstacles):
        rect = pygame.Rect(position[0] - 10, position[1] - 10, 20, 20)
        return any(obstacle.rect.colliderect(rect) for obstacle in obstacles)

    def is_within_bounds(self, position):
        return 0 <= position[0] < SCREEN_WIDTH and 0 <= position[1] < SCREEN_HEIGHT

def generate_obstacles(num_obstacles):
    obstacles = pygame.sprite.Group()
    for _ in range(num_obstacles):
        width = random.randint(10, 30)  # Random width
        height = random.randint(10, 30)  # Random height
        obstacle = Obstacle(random.randint(0, SCREEN_WIDTH), random.randint(0, SCREEN_HEIGHT), width, height)
        obstacles.add(obstacle)
    return obstacles

def main():
    clock = pygame.time.Clock()
    obstacles = generate_obstacles(50)  # Increased number of obstacles
    destination = None  # Destination will be set manually
    vehicle = Vehicle(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)
    all_sprites = pygame.sprite.Group()
    all_sprites.add(vehicle)
    all_sprites.add(obstacles)

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:  # Left click to set destination
                    destination = event.pos
                    if not vehicle.is_within_bounds(destination):
                        destination = None

        screen.fill(WHITE)
        if destination:
            pygame.draw.circle(screen, BLUE, destination, 10)  # Draw destination marker
            vehicle.update(obstacles, destination)
        all_sprites.draw(screen)
        pygame.display.flip()
        clock.tick(60)

if __name__ == "__main__":
    main()
